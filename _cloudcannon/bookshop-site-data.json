{"site":{"posts":[{"draft":false,"categories":[],"layout":"post","date":"2022-05-07 14:39:00 +0545","title":"Asynchronous Javascript","description":"Brief overview of asynchronous programming in javascript","tags":["Coding"],"image":"/images/asynchronous.png","slug":"asynchronous-javascript","ext":".markdown","excerpt":"<p>Asynchronous Programming is the technique that enables us to handle asynchronous tasks like file uploads or HTTP requests which makes sure that our program remains responsive rather than just waiting for these tasks to complete.</p>\n","content":"<p>Asynchronous Programming is the technique that enables us to handle asynchronous tasks like file uploads or HTTP requests which makes sure that our program remains responsive rather than just waiting for these tasks to complete.</p>\n\n<p>Here I am going to talk about callbacks, promises and async-await in javascript. Note that this is intended for people with a basic understanding of javascript and not intended to be an ‘introduction’ to these topics. I would suggest learning about asynchronous programming at :</p>\n<ul>\n  <li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous</a></li>\n  <li><a href=\"https://javascript.info/js\">https://javascript.info/js</a></li>\n</ul>\n\n<p>Before starting, the first thing we should note is that when we use these asynchronous functions in the real world, we typically deal with two outcomes : a success case and a failure case; i.e. required operation was performed or there was some error during operation.</p>\n\n<p>Okay let’s start with <b>callbacks</b></p>\n\n<blockquote>\n  <p>Callbacks</p>\n</blockquote>\n\n<p>In essence, a <b>callback function</b> is a function that is passed as an argument to another function. The idea is that we have an extra argument at the end where we pass our function with the expection that this function will be executed once the asynchronous operation is completed.</p>\n\n<p>Let’s see this in action. Here I have a simple doSomething function for example(Not practical as my function is not even asynchronous). Although we generally don’t create our own asynchronous functions, it should be noted that we can if we want to. We generally deal with calling the asynchronous function (second part). If we see the doSomething function call, we can see an anonymous function being passed as an argument(no other arguments in this case) with error and result.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"kd\">const</span> <span class=\"nx\">doSomething</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Success case</span>\n        <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Success result here</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">//...</span>\n        <span class=\"c1\">// Error case</span>\n        <span class=\"c1\">// callback('Error has occured!', undefined); // remember that callback can only be called once</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">doSomething</span><span class=\"p\">((</span><span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p><br />\nLet’s see a practical example. Here I want to find a customer with the given name from the mongoDB database. Obviously this findOne is an asynchronous operation. So, the first argument is the the normal argument of the function. The final argument on the other hand is the callback pattern of sending an anonymous function with the success result and error.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Customers</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">findOne</span><span class=\"p\">({</span>\n        <span class=\"na\">name</span> <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Sherlock Holmes</span><span class=\"dl\">'</span>\n    <span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n    <span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p><br />\nThe problem with the callback pattern is that it looks clunky and not as elegant as just doing something like (as in synchronous programming) :</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"kd\">const</span> <span class=\"nx\">requiredUser</span> <span class=\"o\">=</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Customers</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">findOne</span><span class=\"p\">({</span><span class=\"na\">name</span> <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Sherlock Holmes</span><span class=\"dl\">'</span><span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p><br />\nMoreover imagine stacking multiple callbacks inside callbacks(People call it callback hell).</p>\n\n<blockquote>\n  <p>Promise</p>\n</blockquote>\n\n<p>Okay, lets move on to another approach. Now with Promises, we don’t send a function to be executed on completion of the asynchronous operation. Rather, the idea is that the asynchronous function returns an object(called a Promise) when we call the function. So? What do I do with the object then? Remember that it all comes down to fact that we either expect the asynchronous operation to succeed(called resolved) or fail(called rejected). We use then() and catch() for these.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"kd\">const</span> <span class=\"nx\">doSomething</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Success case</span>\n        <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Result of successful operation</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">//....</span>\n        <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Some error</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"nx\">doSomething</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">result</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n    <span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">error</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n    <span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p><br />\nHere we use then() for result and at the end we use catch() to catch any errors.</p>\n\n<p>Before seeing a real example, I want to show something called promise chaining; i.e. how we can stack promises a lot better than we could do for callbacks :</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"kd\">const</span> <span class=\"nx\">add</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">);</span>\n            <span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">sum</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">sum</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">sum2</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sum2</span><span class=\"p\">);</span>\n    <span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p><br />\nHere, what I wanted to show is how we can chain a bunch of promises together to essentially use the result of one promise to call another function. What I mean by that is I want the second sum() function call to wait for the result of the first one and only then execute.</p>\n\n<p>Okay lets see the database example with promise.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Customers</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">findOne</span><span class=\"p\">({</span>\n        <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Sherlock Holmes</span><span class=\"dl\">'</span>\n    <span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">result</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n    <span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\n    <span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p><br />\nThis is indeed more easier to read that callbacks. But still, we haven’t achieved our dream of calling asynchronous functions as we do with synchronous ones like :</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"kd\">const</span> <span class=\"nx\">sum1</span> <span class=\"o\">=</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">sum2</span> <span class=\"o\">=</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">sum1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sum2</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p><br />\n(Note that this obviously doesn’t work because add is supposed to be an asynchronous function)</p>\n\n<blockquote>\n  <p>Async-await</p>\n</blockquote>\n\n<p>Now comes the cool part. Before diving into async and await, we need to get something clear first. Its not like async-await is the next progressive thing from promises like going from callbacks to promises. It just helps/makes it easier to work with promises and helps us manage our asynchronous code.</p>\n\n<p>Okay, what’s cool about async-await is that we can call asynchronous functions like we had wanted to above :</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"kd\">const</span> <span class=\"nx\">add</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">);</span>\n            <span class=\"p\">},</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">doSmthg</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">sum1</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">sum2</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">sum1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sum2</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">doSmthg</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<p><br />\nSee that we can just store the result of one add function call and the call the next one afterwards. As the name suggests, we ‘await’ the add function to complete its execution before the execution of the next await function. Okay, now let’s see how we use this. As of now, we have to use ‘await’ inside a function and this function has to be marked as asynchronous. We use ‘async’ infront of a function to indicate it as a asynchronous function where you intend to use ‘await’.</p>\n\n<p>For the sake of completion, I will briefly note a few things :</p>\n<ol>\n  <li>\n    <p>Normal functions return whatever you return inside(or undefined if nothing is returned). But async functions always returns a promise which is fulfilled with the value you return :</p>\n\n    <ul>\n      <li>Normal function\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>      <span class=\"kd\">const</span> <span class=\"nx\">doSmthg</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"dl\">'</span><span class=\"s1\">Hey</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">doSmthg</span><span class=\"p\">());</span>\n\n  <span class=\"o\">--&gt;</span> <span class=\"nx\">Hey</span>\n</code></pre></div>        </div>\n      </li>\n      <li>Async function\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>      <span class=\"kd\">const</span> <span class=\"nx\">doSmthg</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"dl\">'</span><span class=\"s1\">Hey</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">doSmthg</span><span class=\"p\">());</span>\n\n  <span class=\"o\">--&gt;</span> <span class=\"nb\">Promise</span> <span class=\"p\">{</span><span class=\"nx\">Hey</span><span class=\"p\">}</span>\n</code></pre></div>        </div>\n        <p><br /></p>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <p>Remember that the only thing we are going to do differently is in handling the promise(ie. inside the doSmthg function where we call add). We don’t have to alter the asynchronous function add() (It would be different for callback and promise though). It still returns a promise.</p>\n  </li>\n  <li>\n    <p>To handle errors, use try and catch blocks</p>\n  </li>\n</ol>\n\n<p><br />\n<br />\n<b>Thank you for making it to the end! I hope you learned something. I’ve probably left important bits of information or made few errors here and there as I am not an expert in Javascript. So, do let me know. </b></p>\n","url":"/blog/asynchronous-javascript","relative_path":"_posts/2022-07-05-asynchronous-javascript.markdown","permalink":null}],"pages":[{"draft":false,"categories":[],"layout":"default","title":"About","content_blocks":[{"_bookshop_name":"page-heading","title":"About","description":"Get to know me!"},{"_bookshop_name":"page-image","image":"/images/a11.jpg","image_alt":"My photo"},{"_bookshop_name":"content","content_html":"<p>Hello! My name is <strong>Sandesh Ghimire</strong>. I am a 3rd year Engineering student studying \n  <strong>Computer Engineering</strong> in Pulchowk Campus, IOE, TU.\n</p> <p>\n  I am interested in Web development, Creative Coding, Graphics design and Illustrations.\n</p>\n<strong>Email : </strong> <p>Primary : &nbsp; &nbsp;&nbsp; snadeghimire@gmail.com <br>Secondary : 075bct075.sandesh@pcampus.edu.np </p> <div class=\"con\"> <p><strong>Tools I use : </strong></p>\n  <span class=\"js c_icon\">\n    <ion-icon name=\"logo-javascript\"></ion-icon>\n  </span>\n  <span class=\"node c_icon\">\n    <ion-icon name=\"logo-nodejs\"></ion-icon>\n  </span>\n  <span class=\"react c_icon\">\n    <ion-icon name=\"logo-react\"></ion-icon>\n  </span>\n  <span class=\"git c_icon\">\n    <ion-icon src=\"/images/git.svg\"></ion-icon>\n  </span>\n  <span class=\"github c_icon\">\n    <ion-icon name=\"logo-github\"></ion-icon>\n  </span>\n  <span class=\"mongo c_icon\">\n    <ion-icon src=\"/images/mongo.svg\"></ion-icon>\n  </span>\n  <span class=\"ill c_icon\">\n    <ion-icon src=\"/images/illu.svg\"></ion-icon>\n  </span>\n  <span class=\"ps c_icon\">\n    <ion-icon src=\"/images/ps.svg\"></ion-icon>\n  </span>\n</div>\n\n<style>\n  .con{\n    margin-top: 3em;\n  }\n\n  .c_icon {\n    color: gray;\n    fill:gray;\n    font-size: 64px;\n    margin-right: .2em;\n  }\n  .c_icon:hover{\n    color: rgb(242,162,51);\n    fill: rgb(242,162,51);\n  }\n  .js:hover {\n    color: rgb(242,162,51);\n  }\n  .node:hover {\n    color: rgb(119,176,51);\n  }\n  .react:hover {\n    color: rgb(97, 219, 251);\n  }\n  .git:hover {\n    color: rgb(243, 79, 41);\n  }\n  .github:hover {\n    color: rgb(22, 27, 34);\n  }\n  .mongo:hover {\n    color: rgb(119,176,51);\n  }\n</style>\n<br> <p>\n  I love listening to music. In my free time, I play guitar and the piano. Finding new music is a treat!\n  <br>I'm also into art and Graphics Design. I've been learning and making digital graphics, illustrations,\n  vector portraits, landscapes, logos for a few years now.  \n</p>"}],"slug":"about","ext":".html","tags":[],"excerpt":"<script type=\"module\" src=\"https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js\"></script>\n<script nomodule src=\"https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js\"></script>\n","date":"2022-05-08 10:26:19 +0545","content":"<script type=\"module\" src=\"https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js\"></script>\n<script nomodule src=\"https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js\"></script>\n","url":"/about/","relative_path":"_pages/about.html","permalink":null},{"draft":false,"categories":[],"layout":"default","title":"Blog","content_blocks":[{"_bookshop_name":"page-heading","title":"Blog","description":"I was never really good at expressing thoughts and ideas in writing but have been trying to force myself to write more. Hope to see a few posts here in the days to come!"},{"_bookshop_name":"posts-list","show_posts":true}],"slug":"blog","ext":".html","tags":[],"excerpt":"","date":"2022-05-08 10:26:19 +0545","content":"","url":"/blog/","relative_path":"_pages/blog.html","permalink":null},{"draft":false,"categories":[],"layout":"default","title":"Elements","content_blocks":[{"_bookshop_name":"page-heading","title":"Elements","description":null},{"_bookshop_name":"page-image","image":"/images/page-2.jpg","image_alt":null},{"_bookshop_name":"content","content_html":"<p>Element</p>"}],"slug":"elements","ext":".html","tags":[],"excerpt":"","date":"2022-05-08 10:26:19 +0545","content":"","url":"/elements/","relative_path":"_pages/elements.html","permalink":null},{"draft":false,"categories":[],"layout":"default","permalink":"/","title":"Home","content_blocks":[{"_bookshop_name":"hero","title":"Hello there! I am Sandesh Ghimire.","description_html":"<p>Currently I am a 3rd year Computer Engineering student from Lalitpur, Nepal. I love learning new things and am interested in Web development, Creative Coding, Graphics design and Illustrations. In my free time, I like to practise playing guitar, read books, make digital portraits and landscapes.</p>","image":"/images/edit22.jpg","image_alt":"Sandesh's picture","cta_button":"Get in touch","cta_button_link":"#contact","works_button":"What am I up to?","works_button_link":"#projects"},{"_bookshop_name":"projects-section","title":"Projects","description_html":"<p>Some small projects I've been doing! <b>View all</b> for complete list</p>","link_url":"/projects","show_projects":true},{"_bookshop_name":"blog-section","title":"Blogs?","description_html":"<p>I was never really good at expressing thoughts and ideas in writing but have been trying to force myself to write more. Hope to see a few posts here in the days to come!</p>","link_url":"/blog","show_posts":true},{"_bookshop_name":"contact-form","form_title":"Contact me!","form_description":null,"form_submission_email":"snadeghimire@gmail.com","form_button_text":"Send!"}],"slug":"index","ext":".html","tags":[],"excerpt":"","date":"2022-05-08 10:26:19 +0545","content":"","url":"/","relative_path":"_pages/index.html"},{"draft":false,"categories":[],"layout":"default","title":"Projects","content_blocks":[{"_bookshop_name":"page-heading","title":"Projects","description":"Some projects I've done since I started learning programming!"},{"_bookshop_name":"projects-list","show_projects":true}],"slug":"projects","ext":".html","tags":[],"excerpt":"","date":"2022-05-08 10:26:19 +0545","content":"","url":"/projects/","relative_path":"_pages/projects.html","permalink":null}],"projects":[{"draft":false,"categories":[],"layout":"project","date":"2021-01-01 08:05:35 +0545","title":"Dragon Curve","subtitle":"Visualization","image":"/images/DragonCurve.png","slug":"dragon-curve","ext":".md","tags":[],"excerpt":"<p><br /></p>\n","content":"<p><br /></p>\n\n<h4 id=\"githubcomsandace11js-projectsdragoncurve\"><a href=\"https://github.com/Sandace11/JS-Projects/tree/main/DragonCurve\">Github.com/Sandace11/JS-Projects/DragonCurve</a></h4>\n\n<h1 id=\"dragon-curve\">Dragon Curve</h1>\n<p>Add description!</p>\n\n<h2 id=\"demo\">Demo</h2>\n<p><em><a href=\"https://sandesh-ghimire.com.np/codePages/DragonCurve/index.html\">sandesh-ghimire.com.np/codePages/DragonCurve</a></em></p>\n","url":"/project/dragon-curve","relative_path":"_projects/2021-01-01-dragon-curve.md","permalink":null},{"draft":false,"categories":[],"layout":"project","date":"2021-03-20 08:05:35 +0545","title":"Egg Robot","subtitle":"Blender","image":"/images/eggRobot.jpg","slug":"egg-robot","ext":".md","tags":[],"excerpt":"<p><br /></p>\n","content":"<p><br /></p>\n\n<h4 id=\"githubcomsandace11blendereggrobot\"><a href=\"https://github.com/Sandace11/Blender/tree/main/EggRobot\">Github.com/Sandace11/Blender/EggRobot</a></h4>\n\n<h1 id=\"an-egg-happily-leaves-the-kitchen-checkout-animation-for-demo\">An egg happily leaves the kitchen. Checkout animation for demo</h1>\n<p>Add description!</p>\n\n<p><img src=\"/images/eggRobot.gif\" alt=\"EggRobot\" /></p>\n","url":"/project/egg-robot","relative_path":"_projects/2022-03-20-egg-robot.md","permalink":null},{"draft":false,"categories":[],"layout":"project","date":"2021-03-21 14:59:35 +0545","title":"Data Structure & Algorithms Project","subtitle":"Algorithm","image":"/images/project-2.png","slug":"DSA-project","ext":".md","tags":[],"excerpt":"<p><br /></p>\n","content":"<p><br /></p>\n\n<h4 id=\"githubcomsandace11dsa_project\"><a href=\"https://github.com/Sandace11/DSA_Project\">Github.com/Sandace11/DSA_Project</a></h4>\n\n<h1 id=\"dsa_project\">DSA_Project</h1>\n<p>Data Structure and Algorithm Project, 4th Semester</p>\n\n<h2 id=\"visualization-of-quicksort-algorithm--huffman-tree\">Visualization of Quicksort Algorithm &amp; Huffman Tree</h2>\n\n<p><img src=\"https://raw.githubusercontent.com/Sandace11/DSA_Project/main/screenshots/output.gif\" alt=\"screenshot.gif\" /></p>\n\n<h3 id=\"requirements\">Requirements</h3>\n<ul>\n  <li>SDL2</li>\n  <li>SDL2_ttf (for rendering fonts)</li>\n  <li>GNU Make (for building executable)</li>\n</ul>\n\n<h3 id=\"project-initialization\">Project Initialization</h3>\n<p>Run the <code class=\"language-plaintext highlighter-rouge\">init.sh</code> to initialize the directory structure.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>chmod +x init.sh\n./init.sh\n</code></pre></div></div>\n<p>If your default shell does not support bash scripting, create two \nnew directories manually : <code class=\"language-plaintext highlighter-rouge\">build</code> and <code class=\"language-plaintext highlighter-rouge\">bin</code>. That is what <code class=\"language-plaintext highlighter-rouge\">init.sh</code>\nessentially does. For more details, see <strong>Directory Structure</strong> below.</p>\n\n<h3 id=\"make-instructions\">Make Instructions</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">make</code> - to compile the program<br />\n<code class=\"language-plaintext highlighter-rouge\">make run</code> - to run the build/executable<br />\n<code class=\"language-plaintext highlighter-rouge\">make clean</code> - delete the created object files, for cleanup</p>\n\n<h3 id=\"directory-structure\">Directory Structure</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">init.sh</code> creates two new directories</p>\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">build</code> (to store object files)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">bin</code> (to store the final binary)</li>\n</ul>\n\n<p>These directories are essential as all object files and the final\ncreated executable use them as path. This is done to keep the root\nproject directory clean.</p>\n\n<p>The names can be manually edited inside the <code class=\"language-plaintext highlighter-rouge\">MakeFile</code> and \n<code class=\"language-plaintext highlighter-rouge\">init.sh</code> (just change the variable values inside):</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>build_dir=build\nbinary_dir=bin\n</code></pre></div></div>\n<p>Your final project structure should look something like this:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\n├── assets/                 # Fonts and other resources\n├── bin/                    # Final working binary\n├── build/                  # Compiled object files\n├── includes/               # Headers and their source files\n├── lib/                    # Custom files that fall under 'library'\n├── screenshots/            # If and any screenshots for preview\n├── main.cpp                # Entry point into the program\n├── init.sh                 # The initialization script\n├── MakeFile                # MakeFile for compilation/build instructions\n└── README.md               # README file\n</code></pre></div></div>\n\n<h3 id=\"notes\">Notes:</h3>\n<ul>\n  <li>Not Windows compatible for now, mostly due to path changes required for SDL.</li>\n  <li>Need to work on a script to auto-install all the required libraries.</li>\n  <li>External contributions/pull requests will not be accepted as of \nnow, since this is a college project.</li>\n</ul>\n\n<h3 id=\"primary-contributors\">Primary Contributors:</h3>\n<p><a href=\"https://github.com/pranjalpokharel7\">@pranjalpokharel7</a><br />\n<a href=\"https://github.com/Sandace11\">@Sandace11</a><br />\n<a href=\"https://github.com/UdeshyaDhungana\">@UdeshyaDhungana</a></p>\n\n","url":"/project/dsa-project","relative_path":"_projects/2021-03-21-DSA-project.md","permalink":null},{"draft":false,"categories":[],"layout":"project","date":"2021-04-10 08:05:35 +0545","title":"Moths","subtitle":"Blender","image":"/images/moths.jpg","slug":"moths","ext":".md","tags":[],"excerpt":"<p><br /></p>\n","content":"<p><br /></p>\n\n<h4 id=\"githubcomsandace11blendermoths\"><a href=\"https://github.com/Sandace11/Blender/tree/main/moths\">Github.com/Sandace11/Blender/Moths</a></h4>\n\n<h1 id=\"just-moths-checkout-animation-for-demo\">Just moths! Checkout animation for demo</h1>\n<p>Add description!</p>\n","url":"/project/moths","relative_path":"_projects/2022-04-10-moths.md","permalink":null},{"draft":false,"categories":[],"layout":"project","date":"2021-05-01 08:05:35 +0545","title":"Brick Game","subtitle":"Game","image":"/images/brick.png","slug":"brick-game","ext":".md","tags":[],"excerpt":"<p><br /></p>\n","content":"<p><br /></p>\n\n<h4 id=\"githubcomsandace11js-projectsbrick\"><a href=\"https://github.com/Sandace11/JS-Projects/tree/main/Brick\">Github.com/Sandace11/JS-Projects/Brick</a></h4>\n\n<h1 id=\"hangman-game\">Hangman Game</h1>\n<p>Poopy implementation of the classic brick game. Add description!</p>\n\n<h2 id=\"demo\">Demo</h2>\n<p><em><a href=\"https://sandesh-ghimire.com.np/codePages/Brick/index.html\">sandesh-ghimire.com.np/codePages/Brick</a></em></p>\n","url":"/project/brick-game","relative_path":"_projects/2021-05-01-brick-game.md","permalink":null},{"draft":false,"categories":[],"layout":"project","date":"2021-05-31 08:05:35 +0545","title":"Hangman","subtitle":"Game","image":"/images/hangman.png","slug":"hangman","ext":".md","tags":[],"excerpt":"<p><br /></p>\n","content":"<p><br /></p>\n\n<h4 id=\"githubcomsandace11js-projectshangman\"><a href=\"https://github.com/Sandace11/JS-Projects/tree/main/Hangman\">Github.com/Sandace11/JS-Projects/Hangman</a></h4>\n\n<h1 id=\"hangman-game\">Hangman Game</h1>\n<p>Add description!</p>\n\n<h2 id=\"demo\">Demo</h2>\n<p><em><a href=\"https://sandesh-ghimire.com.np/codePages/Hangman/index.html\">sandesh-ghimire.com.np/codePages/Hangman</a></em></p>\n","url":"/project/hangman","relative_path":"_projects/2021-05-31-hangman.md","permalink":null},{"draft":false,"categories":[],"layout":"project","date":"2021-11-15 08:05:35 +0545","title":"Arc Reactor","subtitle":"Blender","image":"/images/arc.jpg","slug":"arc-reactor","ext":".md","tags":[],"excerpt":"<p><br /></p>\n","content":"<p><br /></p>\n\n<h4 id=\"githubcomsandace11blenderarcreactor\"><a href=\"https://github.com/Sandace11/Blender/tree/main/arc%20Reactor\">Github.com/Sandace11/Blender/arcReactor</a></h4>\n\n<h1 id=\"arc-reactor-from-iron-man\">Arc Reactor from Iron Man</h1>\n<p>Add description!</p>\n","url":"/project/arc-reactor","relative_path":"_projects/2021-11-15-arc-reactor.md","permalink":null},{"draft":false,"categories":[],"layout":"project","date":"2022-01-13 08:05:35 +0545","title":"Self Organizing map","subtitle":"Unsupervised Learning","image":"/images/index.png","slug":"Self-Organizing-Map","ext":".md","tags":[],"excerpt":"<p><br /></p>\n<h4 id=\"githubcomsandace11self-organizing-map\"><a href=\"https://github.com/Sandace11/Self-Organizing-Map/\">Github.com/Sandace11/Self-Organizing-Map</a></h4>\n","content":"<p><br /></p>\n<h4 id=\"githubcomsandace11self-organizing-map\"><a href=\"https://github.com/Sandace11/Self-Organizing-Map/\">Github.com/Sandace11/Self-Organizing-Map</a></h4>\n\n<p>Implementation of <strong>Kohonen’s Self Organising Feature Map</strong> or SOM.</p>\n\n<p>Initial parameters can be adjusted in <a href=\"https://github.com/Sandace11/Self-Organizing-Map/blob/main/src/constants.js\">src/constants.js</a></p>\n<h2 id=\"demo\">Demo</h2>\n<p><em><a href=\"https://sandace11.github.io/codePages/Self-Organizing-Map/index.html\">sandesh-ghimire.com.np/codePages/SOM</a></em></p>\n\n<h2 id=\"resources-and-references\">Resources and References</h2>\n<ul>\n  <li><a href=\"http://www.ai-junkie.com/ann/som/som1.html\">Kohonen’s Self Organizing Feature Maps - ai-junkie</a></li>\n  <li><a href=\"http://www.mlab.uiah.fi/~timo/som/thesis-som.html\">Description of Kohonen’s Self-Organizing Map - Timo Honkela</a></li>\n  <li><a href=\"https://youtu.be/g8O6e9C_CfY?t=544\">Self-Organizing Maps Intuition Video</a></li>\n</ul>\n\n","url":"/project/self-organizing-map","relative_path":"_projects/2022-01-13-Self-Organizing-Map.md","permalink":null},{"draft":false,"categories":[],"layout":"project","date":"2022-03-20 23:51:35 +0545","title":"Rubicks Cube","subtitle":"Blender","image":"/images/RubicksCube.png","slug":"rubicks-cube","ext":".md","tags":[],"excerpt":"<p><br /></p>\n","content":"<p><br /></p>\n\n<h4 id=\"githubcomsandace11blenderrubickscube\"><a href=\"https://github.com/Sandace11/Blender/tree/main/RubicksCube\">Github.com/Sandace11/Blender/RubicksCube</a></h4>\n\n<h1 id=\"rubicks-cube-checkout-animation-for-demo\">Rubick’s Cube. Checkout animation for demo</h1>\n<p>Add description!</p>\n\n<p><img src=\"/images/Rubick.gif\" alt=\"RubicksCube\" /></p>\n\n","url":"/project/rubicks-cube","relative_path":"_projects/2021-03-20-rubicks-cube.md","permalink":null}],"testimonials":[],"data":{"author":{"author_name":"Sandesh Ghimire","author_image":"/images/av.jpg"},"footer":{"footer_menu__settings":{"menu__items":[{"title":"Home","url":"/"},{"title":"Projects","url":"/projects/"},{"title":"Elements","url":"/elements/"},{"title":"About","url":"/about/"},{"title":"Blog","url":"/blog/"}]},"copyright_text_html":"<p>2022 <a href=\"/\">Sandesh Ghimire</a>. Site created using <a href = \"https://jekyllrb.com/\">Jekyll</a>.</p>"},"general_settings":{"title":"Sandesh Ghimire","description":"My personal Website","social_media_share_image":"/images/1.jpg","disqus-identifier":null,"google-analytics":null},"navigation":{"logo_image":"/images/mytemplogo.png","menu__settings":{"menu__items":[{"title":"Home","url":"/"},{"title":"Projects","url":"/projects/"},{"title":"Blog","url":"/blog/"},{"title":"About","url":"/about/"}]}},"newsletter":{"newsletter_title":"Not my newsletter","newsletter_description":"NO","newsletter_identifier":null,"newsletter_button":"Subscribe"},"social_links":{"social":[{"icon":"Twitter","link":"https://twitter.com/Sandace11"},{"icon":"Github","link":"https://github.com/Sandace11"},{"icon":"Facebook","link":"https://www.facebook.com/sandesh.ghimire.568632/"}]}},"baseurl":null,"title":"Vonge"}}